// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Test {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
}

model User {
  id String @id
  username String @unique
  avatar String?
  cover String?
  name String?
  surname String?
  description String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  comments Comment[]
  likes Like[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings")
  followRequestsSent FolloweRequest[] @relation("FollowRequestSent")
  followRequestsReceived FolloweRequest[] @relation("FollowRequestReceived")
  blocks Block[] @relation("BlocksSent")
  blockedBy Block[] @relation("BlocksReceived")
  stories Story[]
}

model Post {
  id Int @id @default(autoincrement())
  desc String
  img String?
  createdAt DateTime @default(now())
  uppdatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  uppdatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes Like[]
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int?
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId Int?
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Follower {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  followerId String
  follower User @relation("UserFollowers",fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following User @relation("UserFollowings",fields: [followingId], references: [id], onDelete: Cascade)
}

model FolloweRequest {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  senderId String
  sender User @relation("FollowRequestSent",fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver User @relation("FollowRequestReceived",fields: [receiverId], references: [id], onDelete: Cascade)
  @@unique([senderId, receiverId])
}

model Block {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blockerId String
  blocker User @relation("BlocksSent",fields: [blockerId], references: [id], onDelete: Cascade)
  blockedId String
  blocked User @relation("BlocksReceived",fields: [blockedId], references: [id], onDelete: Cascade)
  @@unique([blockerId, blockedId])
}

model Story {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime 
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
}